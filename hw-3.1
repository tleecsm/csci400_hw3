#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.2 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 9 #"Consolas\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 391 0 29 3 26 #"#lang s-exp \"language.rkt\""
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 71
(
 #";; NOTE: you may want to convert some of these ``define`` statements"
 #" to"
) 0 0 25 29 1 #"\n"
0 0 17 3 53 #";; ``define/match`` or some other type of definition."
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 76
(
 #";; Implement boolean AND across a list of booleans. You should implm"
 #"ent this"
) 0 0 25 29 1 #"\n"
0 0 17 3 78
(
 #";; recursively, and you *cannot* use the built-in ``and`` macro. Thi"
 #"s function"
) 0 0 25 29 1 #"\n"
0 0 17 3 73
(
 #";; should short-circuit as soon as a #f is seen, and when the functi"
 #"on is"
) 0 0 25 29 1 #"\n"
0 0 17 3 50 #";; called with no arguments #t should be returned."
0 0 25 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 25 29 1 #"\n"
0 0 17 3 13 #";; Arguments:"
0 0 25 29 1 #"\n"
0 0 17 3 77
(
 #";; - ``expression``: will be a list of #t and #f values (although so"
 #"me of the"
) 0 0 25 29 1 #"\n"
0 0 17 3 78
(
 #";;   tests include other things to check the functionality of your f"
 #"unctions)."
) 0 0 25 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 25 29 1 #"\n"
0 0 17 3 21 #";; Example: (and '())"
0 0 25 29 1 #"\n"
0 0 17 3 14 #";;    ==>   #t"
0 0 25 29 1 #"\n"
0 0 17 3 23 #";; Example: (and '(#f))"
0 0 25 29 1 #"\n"
0 0 17 3 14 #";;    ==>   #f"
0 0 25 29 1 #"\n"
0 0 17 3 26 #";; Example: (and '(#t #t))"
0 0 25 29 1 #"\n"
0 0 17 3 14 #";;    ==>   #t"
0 0 25 29 1 #"\n"
0 0 17 3 90
(
 #";; Example: (and '(#f (error \"should not evaluate this because firs"
 #"t argument is false\")))"
) 0 0 25 29 1 #"\n"
0 0 17 3 14 #";;    ==>   #f"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 1 #" "
0 0 14 3 10 #"expression"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 25 3 1 #" "
0 0 14 3 10 #"expression"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 25 3 2 #") "
0 0 22 3 2 #"#t"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 9 #"list-rest"
0 0 25 3 1 #" "
0 0 14 3 4 #"head"
0 0 25 3 1 #" "
0 0 14 3 4 #"tail"
0 0 25 3 3 #") ("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 4 #"head"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 1 #" "
0 0 14 3 4 #"tail"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    )"
0 0 25 29 1 #"\n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 75
(
 #";; Implement boolean OR across a list of booleans. You should implme"
 #"nt this"
) 0 0 25 29 1 #"\n"
0 0 17 3 77
(
 #";; recursively, and you *cannot* use the built-in ``or`` macro. This"
 #" function"
) 0 0 25 29 1 #"\n"
0 0 17 3 73
(
 #";; should short-circuit as soon as a #t is seen, and when the functi"
 #"on is"
) 0 0 25 29 1 #"\n"
0 0 17 3 50 #";; called with no arguments #f should be returned."
0 0 25 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 25 29 1 #"\n"
0 0 17 3 13 #";; Arguments:"
0 0 25 29 1 #"\n"
0 0 17 3 77
(
 #";; - ``expression``: will be a list of #t and #f values (although so"
 #"me of the"
) 0 0 25 29 1 #"\n"
0 0 17 3 78
(
 #";;   tests include other things to check the functionality of your f"
 #"unctions)."
) 0 0 25 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 25 29 1 #"\n"
0 0 17 3 20 #";; Example: (or '())"
0 0 25 29 1 #"\n"
0 0 17 3 14 #";;    ==>   #f"
0 0 25 29 1 #"\n"
0 0 17 3 22 #";; Example: (or '(#f))"
0 0 25 29 1 #"\n"
0 0 17 3 14 #";;    ==>   #f"
0 0 25 29 1 #"\n"
0 0 17 3 25 #";; Example: (or '(#f #t))"
0 0 25 29 1 #"\n"
0 0 17 3 14 #";;    ==>   #t"
0 0 25 29 1 #"\n"
0 0 17 3 89
(
 #";; Example: (or '(#t (error \"should not evaluate this because first"
 #" argument is false\")))"
) 0 0 25 29 1 #"\n"
0 0 17 3 14 #";;    ==>   #t"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 2 #"or"
0 0 25 3 1 #" "
0 0 14 3 10 #"expression"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 25 3 1 #" "
0 0 14 3 10 #"expression"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 9 #"list-rest"
0 0 25 3 1 #" "
0 0 14 3 4 #"head"
0 0 25 3 1 #" "
0 0 14 3 4 #"tail"
0 0 25 3 3 #") ("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 4 #"head"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 2 #" ("
0 0 14 3 2 #"or"
0 0 25 3 1 #" "
0 0 14 3 4 #"tail"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    )"
0 0 25 29 1 #"\n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 75
(
 #";; Implement boolean NOT on a single boolean. You *cannot* use the b"
 #"uilt-in"
) 0 0 25 29 1 #"\n"
0 0 17 3 72
(
 #";; ``not`` macro. This function will always be passed a single argum"
 #"ent."
) 0 0 25 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 25 29 1 #"\n"
0 0 17 3 13 #";; Arguments:"
0 0 25 29 1 #"\n"
0 0 17 3 45 #";; - ``expression``: will be either #t or #f."
0 0 25 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 25 29 1 #"\n"
0 0 17 3 20 #";; Example: (not #t)"
0 0 25 29 1 #"\n"
0 0 17 3 14 #";;    ==>   #f"
0 0 25 29 1 #"\n"
0 0 17 3 20 #";; Example: (not #f)"
0 0 25 29 1 #"\n"
0 0 17 3 14 #";;    ==>   #t"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 1 #" "
0 0 14 3 10 #"expression"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 10 #"expression"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 75
(
 #";; Implement a function to simplify XOR, IMPLIES, and IFF statements"
 #" to OR,"
) 0 0 25 29 1 #"\n"
0 0 17 3 75
(
 #";; AND, and NOT statements. There are no specific requirements for h"
 #"ow this"
) 0 0 25 29 1 #"\n"
0 0 17 3 68
#";; function be implemented, but you will need to ensure that you are"
0 0 25 29 1 #"\n"
0 0 17 3 45 #";; *recursively* simplifying the expressions."
0 0 25 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 25 29 1 #"\n"
0 0 17 3 13 #";; Arguments:"
0 0 25 29 1 #"\n"
0 0 17 3 74
(
 #";; - ``expression``: will be either a boolean literal (#t or #f) or "
 #"a list"
) 0 0 25 29 1 #"\n"
0 0 17 3 79
(
 #";;   which represents a boolean expression (see the README.rst file "
 #"for details"
) 0 0 25 29 1 #"\n"
0 0 17 3 47 #";;   on the exact format of these expressions)."
0 0 25 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 25 29 1 #"\n"
0 0 17 3 71
(
 #";; Reductions of XOR, IMPLIES, and IFF to AND, OR, and NOT expressio"
 #"ns:"
) 0 0 25 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 25 29 1 #"\n"
0 0 17 3 49 #";;  - (a XOR b)     -> ((a AND -b) OR (-a AND b))"
0 0 25 29 1 #"\n"
0 0 17 3 32 #";;  - (a IMPLIES b) -> (-a OR b)"
0 0 25 29 1 #"\n"
0 0 17 3 49 #";;  - (a IFF b)     -> ((a AND b) OR (-a AND -b))"
0 0 25 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 25 29 1 #"\n"
0 0 17 3 55 #";; You need to perform this simplification recursively."
0 0 25 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 25 29 1 #"\n"
0 0 17 3 76
(
 #";; Do not change any other expressions. However, if they contain exp"
 #"ressions"
) 0 0 25 29 1 #"\n"
0 0 17 3 78
(
 #";; which need to be simplified, then simplify the sub-expressions re"
 #"cursively."
) 0 0 25 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 25 29 1 #"\n"
0 0 17 3 43 #";; Example: (boolean-simplify '(and a b c))"
0 0 25 29 1 #"\n"
0 0 17 3 24 #";;    ==>   '(and a b c)"
0 0 25 29 1 #"\n"
0 0 17 3 41 #";; Example: (boolean-simplify '(xor a b))"
0 0 25 29 1 #"\n"
0 0 17 3 49 #";;    ==>   '(or (and a (not b)) (and (not a) b))"
0 0 25 29 1 #"\n"
0 0 17 3 45 #";; Example: (boolean-simplify '(implies a b))"
0 0 25 29 1 #"\n"
0 0 17 3 27 #";;    ==>   '(or (not a) b)"
0 0 25 29 1 #"\n"
0 0 17 3 41 #";; Example: (boolean-simplify '(iff a b))"
0 0 25 29 1 #"\n"
0 0 17 3 49 #";;    ==>   '(or (and a b) (and (not a) (not b)))"
0 0 25 29 1 #"\n"
0 0 17 3 53 #";; Example: (boolean-simplify '(and (implies a b) b))"
0 0 25 29 1 #"\n"
0 0 17 3 35 #";;    ==>   '(and (or (not a) b) b)"
0 0 25 29 1 #"\n"
0 0 17 3 57 #";; Example: (boolean-simplify '(implies (implies a b) b))"
0 0 25 29 1 #"\n"
0 0 17 3 40 #";;    ==>   '(or (not (or (not a) b)) b)"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 16 #"boolean-simplify"
0 0 25 3 1 #" "
0 0 14 3 10 #"expression"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 76
(
 #";; Implement a function that evaluates whether a given boolean expre"
 #"ssion is"
) 0 0 25 29 1 #"\n"
0 0 17 3 73
(
 #";; true or false. You are given the expression (which may contain li"
 #"teral"
) 0 0 25 29 1 #"\n"
0 0 17 3 74
(
 #";; boolean values or symbols) and a dictionary of symbols to their b"
 #"oolean"
) 0 0 25 29 1 #"\n"
0 0 17 3 79
(
 #";; assignment. You are always guaranteed to have well-formed input, "
 #"so you will"
) 0 0 25 29 1 #"\n"
0 0 17 3 73
(
 #";; not have to worry about cases where a symbol is not in the dictio"
 #"nary."
) 0 0 25 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 25 29 1 #"\n"
0 0 17 3 77
(
 #";; This boolean-eval function should only *directly* handle AND, OR,"
 #" and NOT."
) 0 0 25 29 1 #"\n"
0 0 17 3 30 #";; The grader will check this!"
0 0 25 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 25 29 1 #"\n"
0 0 17 3 74
(
 #";; Any expression that is not handled by boolean-simplify or this fu"
 #"nction"
) 0 0 25 29 1 #"\n"
0 0 17 3 76
(
 #";; should cause an error (see the starter code). (Note that the star"
 #"ter code"
) 0 0 25 29 1 #"\n"
0 0 17 3 78
(
 #";; uses boolean-simplify to automatically convert the more complicat"
 #"ed boolean"
) 0 0 25 29 1 #"\n"
0 0 17 3 22 #";; logic connectives.)"
0 0 25 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 25 29 1 #"\n"
0 0 17 3 13 #";; Arguments:"
0 0 25 29 1 #"\n"
0 0 17 3 74
(
 #";; - ``expression``: will be either a boolean literal (#t or #f) or "
 #"a list"
) 0 0 25 29 1 #"\n"
0 0 17 3 79
(
 #";;   which represents a boolean expression (see the README.rst file "
 #"for details"
) 0 0 25 29 1 #"\n"
0 0 17 3 47 #";;   on the exact format of these expressions)."
0 0 25 29 1 #"\n"
0 0 17 3 75
(
 #";; - ``bindings``: a dictionary of symbols to their boolean literal "
 #"values."
) 0 0 25 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 25 29 1 #"\n"
0 0 17 3 37 #";; Example: (boolean-eval #t #hash())"
0 0 25 29 1 #"\n"
0 0 17 3 14 #";;    ==>   #t"
0 0 25 29 1 #"\n"
0 0 17 3 45 #";; Example: (boolean-eval 'a #hash((a . #f)))"
0 0 25 29 1 #"\n"
0 0 17 3 14 #";;    ==>   #f"
0 0 25 29 1 #"\n"
0 0 17 3 41 #";; Example: (boolean-eval '(and) #hash())"
0 0 25 29 1 #"\n"
0 0 17 3 14 #";;    ==>   #t"
0 0 25 29 1 #"\n"
0 0 17 3 62
#";; Example: (boolean-eval '(and #t b) #hash((a . #t) (b . #t))"
0 0 25 29 1 #"\n"
0 0 17 3 14 #";;    ==>   #t"
0 0 25 29 1 #"\n"
0 0 17 3 61
#";; Example: (boolean-eval '(and a b) #hash((a . #t) (b . #t))"
0 0 25 29 1 #"\n"
0 0 17 3 14 #";;    ==>   #t"
0 0 25 29 1 #"\n"
0 0 17 3 88
(
 #";; Example: (boolean-eval '(iff a (and x y)) #hash((a . #f) (b . #t)"
 #" (x . #f) (y . #t)))"
) 0 0 25 29 1 #"\n"
0 0 17 3 14 #";;    ==>   #t"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"boolean-eval"
0 0 25 3 1 #" "
0 0 14 3 10 #"expression"
0 0 25 3 1 #" "
0 0 14 3 8 #"bindings"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 12 #"define/match"
0 0 25 3 2 #" ("
0 0 15 3 3 #"rec"
0 0 25 3 1 #" "
0 0 14 3 10 #"expression"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"_"
0 0 25 3 3 #") ("
0 0 14 3 4 #"todo"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 71
(
 #"; This is the error which you need to throw if the expression is not"
 #" an"
) 0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 18 #"; AND, OR, or NOT."
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"_"
0 0 25 3 3 #") ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 20 #"\"invalid expression\""
0 0 25 3 1 #" "
0 0 14 3 10 #"expression"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"rec"
0 0 25 3 2 #" ("
0 0 14 3 16 #"boolean-simplify"
0 0 25 3 1 #" "
0 0 14 3 10 #"expression"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0           0
